{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport invariant from 'tiny-invariant'; // Fixing inconsistencies from older browsers\n// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\n\nvar aliases = new Map([['Win', 'Meta'], ['Scroll', 'ScrollLock'], ['Spacebar', ' '], ['Down', 'ArrowDown'], ['Left', 'ArrowLeft'], ['Right', 'ArrowRight'], ['Up', 'ArrowUp'], ['Del', 'Delete'], ['Crsel', 'CrSel'], ['Exsel', 'ExSel'], ['Apps', 'ContextMenu'], ['Esc', 'Escape'], ['Decimal', '.'], ['Multiply', '*'], ['Add', '+'], ['Subtract', '-'], ['Divide', '/']]);\n\nvar shimKeyboardEvent = function shimKeyboardEvent(event) {\n  if (aliases.has(event.key)) {\n    var key = aliases.get(event.key);\n    Object.defineProperty(event, 'key', {\n      configurable: true,\n      enumerable: true,\n      get: function get() {\n        return key;\n      }\n    });\n  }\n};\n\nvar useKeypress = function useKeypress(keys, handler) {\n  !(Array.isArray(keys) || typeof keys === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected `keys` to be an array or string') : invariant(false) : void 0;\n\n  if (Array.isArray(keys)) {\n    keys.forEach(function (key, i) {\n      !(typeof key === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected `keys[\" + i + \"]` to be a string\") : invariant(false) : void 0;\n    });\n  }\n\n  !(typeof handler === 'function' || handler == null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected `handler` to be a function') : invariant(false) : void 0;\n  var eventListenerRef = useRef();\n  useEffect(function () {\n    eventListenerRef.current = function (event) {\n      shimKeyboardEvent(event);\n\n      if (Array.isArray(keys) ? keys.includes(event.key) : keys === event.key) {\n        handler == null ? void 0 : handler(event);\n      }\n    };\n  }, [keys, handler]);\n  useEffect(function () {\n    var eventListener = function eventListener(event) {\n      eventListenerRef.current(event);\n    };\n\n    window.addEventListener('keydown', eventListener);\n    return function () {\n      window.removeEventListener('keydown', eventListener);\n    };\n  }, []);\n};\n\nexport { useKeypress as default };","map":{"version":3,"mappings":"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","names":["aliases","Map","shimKeyboardEvent","event","has","key","get","Object","defineProperty","configurable","enumerable","useKeypress","keys","handler","Array","isArray","forEach","i","process","eventListenerRef","useRef","useEffect","current","includes","eventListener","window","addEventListener","removeEventListener"],"sources":["/Users/JosephChikak/Desktop/React Projects/drum-machine/node_modules/react-use-keypress/src/shimKeyboardEvent.js","/Users/JosephChikak/Desktop/React Projects/drum-machine/node_modules/react-use-keypress/src/index.js"],"sourcesContent":["// Fixing inconsistencies from older browsers\n// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst aliases = new Map([\n  ['Win', 'Meta'],\n  ['Scroll', 'ScrollLock'],\n  ['Spacebar', ' '],\n  ['Down', 'ArrowDown'],\n  ['Left', 'ArrowLeft'],\n  ['Right', 'ArrowRight'],\n  ['Up', 'ArrowUp'],\n  ['Del', 'Delete'],\n  ['Crsel', 'CrSel'],\n  ['Exsel', 'ExSel'],\n  ['Apps', 'ContextMenu'],\n  ['Esc', 'Escape'],\n  ['Decimal', '.'],\n  ['Multiply', '*'],\n  ['Add', '+'],\n  ['Subtract', '-'],\n  ['Divide', '/'],\n]);\n\nconst shimKeyboardEvent = (event) => {\n  if (aliases.has(event.key)) {\n    const key = aliases.get(event.key);\n\n    Object.defineProperty(event, 'key', {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return key;\n      },\n    });\n  }\n};\n\nexport default shimKeyboardEvent;\n","import { useEffect, useRef } from 'react';\nimport invariant from 'tiny-invariant';\nimport shimKeyboardEvent from './shimKeyboardEvent';\n\nconst useKeypress = (keys, handler) => {\n  invariant(\n    Array.isArray(keys) || typeof keys === 'string',\n    'Expected `keys` to be an array or string'\n  );\n  if (Array.isArray(keys)) {\n    keys.forEach((key, i) => {\n      invariant(\n        typeof key === 'string',\n        `Expected \\`keys[${i}]\\` to be a string`\n      );\n    });\n  }\n  invariant(\n    typeof handler === 'function' || handler == null,\n    'Expected `handler` to be a function'\n  );\n\n  const eventListenerRef = useRef();\n\n  useEffect(() => {\n    eventListenerRef.current = (event) => {\n      shimKeyboardEvent(event);\n      if (Array.isArray(keys) ? keys.includes(event.key) : keys === event.key) {\n        handler?.(event);\n      }\n    };\n  }, [keys, handler]);\n\n  useEffect(() => {\n    const eventListener = (event) => {\n      eventListenerRef.current(event);\n    };\n    window.addEventListener('keydown', eventListener);\n    return () => {\n      window.removeEventListener('keydown', eventListener);\n    };\n  }, []);\n};\n\nexport default useKeypress;\n"]},"metadata":{},"sourceType":"module"}